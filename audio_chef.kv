#:kivy 2.0.0

<Label>:
    color: 'black'

[AccordionItemTitle@Label]:
    text: ctx.title
    color: (1, 1, 1, 1) if ctx.item.collapse else (0, 0, 0, 1)
    canvas.before:
        Color:
            rgb: app.dark_color if ctx.item.collapse else app.light_color
        BorderImage:
            source: 'atlas://assets/audiochef_theme/button'
            pos: self.pos
            size: self.size
        PushMatrix
        Translate:
            xy: self.center_x, self.center_y
        Rotate:
            angle: 90 if ctx.item.orientation == 'horizontal' else 0
            axis: 0, 0, 1
        Translate:
            xy: -self.center_x, -self.center_y
    canvas.after:
        PopMatrix

<AccordionItem>:
    background_normal: 'atlas://assets/audiochef_theme/button'
    background_selected: 'atlas://assets/audiochef_theme/button'

<Button>:
    color: (1, 1, 1, 1)
    background_normal: 'atlas://assets/audiochef_theme/button'
    background_color: app.main_color

[PresetAccordionItemTitle@BoxLayout]:
    canvas.before:
        Color:
            rgb: app.dark_color if ctx.item.collapse else app.light_color
        BorderImage:
            source: 'atlas://assets/audiochef_theme/button'
            pos: self.pos
            size: self.size
        PushMatrix
        Translate:
            xy: self.center_x, self.center_y
        Rotate:
            angle: 90 if ctx.item.orientation == 'horizontal' else 0
            axis: 0, 0, 1
        Translate:
            xy: -self.center_x, -self.center_y
    canvas.after:
        PopMatrix
    BoxLayout:
        Label:
            text: ctx.title
            color: (1, 1, 1, 1) if ctx.item.collapse else (0, 0, 0, 1)
        SelectableButton:
            selected: True
            text: 'Lock'
            on_release:
                self.selected = not self.selected
                ctx.item.locked = not self.selected
                self.text = 'Lock' if self.selected else 'Unlock'


<AudioChefWindow>:
    canvas.before:
        Color:
            rgba: 1, 1, 1, 0.1
        Rectangle:
            pos: self.pos[0] + 50, self.pos[1] + 50
            size: self.size[0] - 100, self.size[1] - 100
            source: 'assets/chef_hat.png'
    orientation: 'vertical'
    name_changer: name_item.ids.name_changer
    name_locked: bool(name_item.locked)
    ext_box: ext_item.ids.ext_box
    ext_locked: bool(ext_item.locked)
    transforms_box: transforms_item.ids.transforms_box
    transforms_locked: bool(transforms_item.locked)
    presets_box: presets_box
    file_box: file_item.ids.file_box
    BoxLayout:
        orientation: 'vertical'
        height: 175
        size_hint_y: None
        Label:
            text: "Welcome to AudioChef.\nIn the future you'll be able to create recipes for me to cook"
            height: 50
            size_hint_y: None
            text_size: self.width, None
            size: self.texture_size
        BoxLayout:
            height: 25
            size_hint_y: None
            Button:
                text: 'Save'
                on_release: root.save_preset()
            Button:
                text: "GO"
                on_release: root.execute_preset()
        Label:
            text: 'Messages:'
            height: 50
            size_hint_y: None
            text_size: self.width, None
            size: self.texture_size
        Label:
            id: messages_label
            height: 50
            size_hint_y: None
            text_size: self.width, None
            size: self.texture_size
    Accordion:
        AccordionItem:
            title: 'Presets'
            BoxLayout:
                id: presets_box
                orientation: 'vertical'
        AccordionItem:
            title: 'Current preset'
            Accordion:
                orientation: 'vertical'
                ExtAccordionItem:
                    id: ext_item
                    locked: bool(root.ext_locked)
                NameAccordionItem:
                    id: name_item
                    locked: bool(root.name_locked)
                TransformsAccordionItem:
                    id: transforms_item
                    locked: bool(root.transforms_locked)
                FilesAccordionItem:
                    id: file_item



<ExtAccordionItem@AccordionItem>:
    title: 'Output Format'
    title_template: 'PresetAccordionItemTitle'
    OptionsBox:
        id: ext_box


<NameAccordionItem@AccordionItem>:
    title: 'File Name Changer'
    title_template: 'PresetAccordionItemTitle'
    OutputChanger:
        id: name_changer


<FilesAccordionItem@AccordionItem>:
    title: 'Added files'
    BoxLayout:
        orientation: 'vertical'
        BoxLayout:
            height: 25
            size_hint_y: None
            Label:
                text: "The files you chose are:"
            Button:
                text: 'Clear all files'
                width: 150
                size_hint_x: None
                on_release: app.dispatch('on_clear_files')
        ScrollView:
            GridLayout:
                cols: 3
                id: file_box
                size_hint_y: None


<TransformsAccordionItem@AccordionItem>:
    title: 'Transformations'
    title_template: 'PresetAccordionItemTitle'
    BoxLayout:
        orientation: 'vertical'
        pos_hint: {'top': 1}
        BoxLayout:
            height: 25
            size_hint_y: None
            Label:
                text: "Added transformations:"
            Button:
                text: '+'
                on_release: app.dispatch('on_add_transform_item')
        BoxLayout:
            orientation: 'vertical'
            ScrollView:
                BoxLayout:
                    id: transforms_box
                    orientation: 'vertical'
                    height: 50 * len(self.children)
                    size_hint_y: None


<TransformationForm>:
    height: 50
    size_hint_y: None
    BoxLayout:
        orientation: 'vertical'
        width: 50
        size_hint_x: None
        Button:
            text: '^'
            on_release: root.shift_up()
        Button:
            text: 'v'
            on_release: root.shift_down()

    Spinner:
        id: spinner
        width: 200
        size_hint_x: None
        text: 'Choose a tranformation:'
        values: root.transformations
        on_text: root.select_transformation(self.text)
    ScrollView:
        BoxLayout:
            id: args_box
            size_hint_x: None
    Button:
        width: 100
        size_hint_x: None
        text: 'remove'
        on_release: root.remove()

<SelectableButton>:
    width: max(120, self.texture_size[0])
    size_hint_x: None
    color: (1, 1, 1, 1) if self.selected else app.main_color
    background_color: app.main_color if self.selected else (1, 1, 1, 1)


<PresetButton>:
    height: 50
    TextInput:
        text: root.preset_name
        on_text: root.rename_preset(root.preset_name, self.text)
    Button:
        text: 'Load'
        on_release: root.load_preset(root.preset_name)
    Label:
        text: 'Default:'
    CheckBox:
        group: 'default_preset'
        active: root.default
        on_active: root.make_default(root.preset_name, self.active)
    Button:
        width: 50
        size_hint_x: None
        text: '-'
        on_release: root.remove_preset(root.preset_name)



<OutputChanger>:
    orientation: 'vertical'
    GridLayout:
        cols: 2
        Label:
            text: 'Choose file name change type:'
        Label:
        Label:
            text: 'Replace text'
        CheckBox:
            active: root.mode == 'replace'
            group: 'name_changer'
            on_active: root.mode = 'replace'
        Label:
            text: 'Wildcards'
        CheckBox:
            active: root.mode == 'wildcards'
            group: 'name_changer'
            on_active: root.mode = 'wildcards'
    RelativeLayout:
        GridLayout:
            cols: 2
            Label:
                id: replace_from_label
                height: 25
                size_hint_y: None
                text: 'Replace this:'
            Label:
                id: replace_to_label
                height: 25
                size_hint_y: None
                text: 'With this:'
            TextInput:
                id: replace_from_input
                height: 25
                size_hint_y: None
                on_text: app.dispatch('on_name_changer_update')
            TextInput:
                id: replace_to_input
                height: 25
                size_hint_y: None
                text: ''
                on_text: app.dispatch('on_name_changer_update')
        BoxLayout:
            orientation: 'vertical'
            Label:
                id: wildcards_label
                height: 25
                size_hint_y: None
                text: 'Output Format:'
            TextInput:
                id: wildcards_input
                height: 25
                size_hint_y: None
                on_text: app.dispatch('on_name_changer_update')


<ValidatedInput>:
    text: text_input.text
    size_hint_y: None
    height: max(input_label.height, text_input.height)
    Label:
        id: input_label
        text: root.name
        height: max(25, self.texture_size[1])
        width: self.texture_size[0] + 10
        size_hint: None, None
    TextInput:
        id: text_input
        text: root.text
        height: self.minimum_height


<ArgumentBox>:
    width: 240
    size_hint_x: None
    Slider:
        id: slider
        min: 0
        max: 100
        value: root.text if root.text.replace('.', '', 1).isdigit() else self.min
        on_touch_move: root.text = str(self.value)
        step: 10


<FileLabel>:
    text_size: self.width, None
    size: self.texture_size